1 => ENTITIES katmanına Readme'deki kütüphaneler indirilir...Sonra yapılar tasarlanır...

2=> CONF katmanına gelinir...ENTITIES katmanından referans verilir...Sonra Configuration sınıfları tanımlanır...

3=>DAL katmanına gecilir...CONF katmanından referans verilir(sadece CONF katmanından referans verilmesi yeterli olacaktır .Net Core'da chain reference vardır dolayısıyla CONF'daki referansı da alacaktır)...Yalnız EntityFrameworkCore.Tools ve Proxies kütüphaneleri referans aldıgınız yerlerde de olmadıgından dolayı bu katmana indirilir...Ondan sonra MyContext sınıfımızı tasarlarken static bogus yapılarımızı da kuruyoruz...Bunun icin Bogus kütüphanesini de bu katmana indiriyoruz...

Oncelikle BogusHandling'deki sınıflarımıza dikkat ediniz...Configuration'larınızı tamamlayınız...Sonra Context sınıfınızı tamamlayınız...

Microsoft.EntityFrameworkCore.SqlServer kütüphanesini de indirin...


Repository islemlerine gecilir... 

MyContext sınıfınızda Seed class'larınız ve Configuration'leriniz OnModelCreating metodunda düzenli bir şekilde cagrılır. DbSet'ler yazılır

Sonra BLL tarafına geciyoruz...


4 => BLL tarafında ilk yapmamız gereken şey UI tarafımızın Middleware'inin istedigi Matematigi tanımlanmaktır...Bunu da projenin her anında (canlıda veya localde) kullanılacagı icin IServiceCollection tipine extension metot ekleyerek yapmaya baslıyoruz... BUrada BLL kaatmanına Microsoft.Extensions.DependencyInjection kütüphanesini yüklemeyi unutmayın. Aynı zamanda Configuration yapısına ulasmak icin Microsoft.Extensions.Configuration.Abstractions kütüphanesini indirin...

Bu noktada UI tarafındaki appsettings.json dosyasına ConnectionString ayarımızı yazdık...



Bir diger Extension metodumuz CustomIdentityResolver class'ı acılarak inject edilecek. 

FluentValidation.AspNetCore kütüphanesini indirin...Hem Identity sistemini getirir hem de bizim yapacagımız özel validation'ları yapmamız classları icerisinde barındırır...

RepositoryResolver sınıfımızı tasarladık...

UI katmanına Microsoft.EntityFrameworkCore.Design kütüphanesini indirin...

Manager sınıflarımızı acmaya baslıyoruz...Tamamlandıktan sonra ManagerResolver sınıfımızı acarak IOC'imizi tanımlamaya baslıyoruz...

5 => Common Katmanıza geciyoruz ve MailService class'ımızı acıyoruz...


6 => MVCUI katmanına geciyoruz...UI katmanına project referans olarak Common ve BLL katmanlarını veriyoruz... MVCUI katmanımızdaki wwwroot klasorumuze geliyor ve onun icerisine yeni bir dosya acıyoruz(OuterTools)...

7 => HomeController icerisinde  Register ve SignIn işlemlerimizi gerçekleştirdik...Bu işlemler bittikten sonra Admin Area'asına geciyoruz(Öncelikle Areas isimli klasoru acmıs olmamız gerekiyor...)

Admin Area'sında Category işlemlerini Advanced DataTable tasarımıyla bitirdikten sonra Product'a geciyoruz...